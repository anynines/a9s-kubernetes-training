(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{155:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return c}));var r=n(2),a=n(9),o=(n(0),n(198)),i={id:"pg-service-primary",title:"Service to Connnect to the Primary"},l={id:"postgresql/40-building-the-pg-stateful-set/pg-service-primary",isDocsHomePage:!1,title:"Service to Connnect to the Primary",description:"In the long run it must be possible to perform a leader election and leader promotion.",source:"@site/docs/postgresql/40-building-the-pg-stateful-set/15-service-primary.md",permalink:"/postgresql/40-building-the-pg-stateful-set/pg-service-primary",sidebar:"docs",previous:{title:"StatefulSets Revisited",permalink:"/postgresql/30-stateful-sets-revisited/stateful-sets-revisited"},next:{title:"Streaming Replication ConfigMaps",permalink:"/postgresql/40-building-the-pg-stateful-set/streaming-replication-configmaps"}},s=[{value:"A Pointer to the Primary",id:"a-pointer-to-the-primary",children:[]},{value:"Subsequent Leader Elections",id:"subsequent-leader-elections",children:[]},{value:"Summary",id:"summary",children:[]},{value:"Links",id:"links",children:[]}],p={rightToc:s};function c(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"In the long run it must be possible to perform a leader election and leader promotion. "),Object(o.b)("p",null,"The leader election algorithm will form a quorum and propose a new leader. The proposed leader will then have to be promoted to become the actual leader. In other words: any secondary may become the new primary eventually."),Object(o.b)("p",null,"For now, we don't want to dive deeply into the details of leader election and leader promotion. So enough to say that ",Object(o.b)("strong",{parentName:"p"},'during the promotion of a leader, the "pointer" to the primary server must be in control of the leader promotion alogithm'),"."),Object(o.b)("p",null,"In the previous chapter we have investigated how the headless Service of a StatefulSet creates ",Object(o.b)("inlineCode",{parentName:"p"},"SRV")," DNS entries acting as pointers to the StatefulSet's Pods. The problem with these DNS entries is that they are static. It's not a bug, it's a features as we wished for a stable network identity of a Pod. In contrast to the volatile identity of Pods, for example in a ReplicaSet."),Object(o.b)("p",null,"However, in this case of leader election more control over the headless Service's backend Pods is required. For this reason it is helpful to ",Object(o.b)("strong",{parentName:"p"},"create another instance of a headless Service which will always point to the current primary"),"."),Object(o.b)("h2",{id:"a-pointer-to-the-primary"},"A Pointer to the Primary"),Object(o.b)("p",null,"The idea of the headless Service as a pointer to the current primary is simple: using a label such as ",Object(o.b)("inlineCode",{parentName:"p"},"role=primary")," applied to the primary Pod. This headless Service, let's call it ",Object(o.b)("inlineCode",{parentName:"p"},"postgresql-primary")," will be using according label as a selector. "),Object(o.b)("p",null,"Before we explain how this will look like in a YAML specification, a undesired complication needs to be discussed: ",Object(o.b)("strong",{parentName:"p"},"bootstraping a StatefulSet"),". When bootstrapping a StatefulSet for the first time, no leader has been elected. Thus, none of the Pods of the StatefulSet is labeled as ",Object(o.b)("inlineCode",{parentName:"p"},"primary")," and therefore, the connection to the primary will fail. Subsequently, the ",Object(o.b)("inlineCode",{parentName:"p"},"pg_backup")," of secondaries fail which brings these Pods into an error state."),Object(o.b)("p",null,"As a workaround for the missing ",Object(o.b)("inlineCode",{parentName:"p"},"role=primary")," label, the initial version of the ",Object(o.b)("inlineCode",{parentName:"p"},"postgresql-primary")," service will look different. As the StatefulSet provides ordinality in which each Pod has a defined identity by having numbers starting from ",Object(o.b)("inlineCode",{parentName:"p"},"0")," it is possible to ",Object(o.b)("strong",{parentName:"p"},"define a fixed primary - let's say ",Object(o.b)("inlineCode",{parentName:"strong"},"pod-0")," - during the bootstrapping process"),". For this purpose, we need a label to point to the first pod in a StatefulSet. Luckily, Kubernetes adds a label to each Pod automatically ","[1]",". Each Pod automatically received a label corresponding to its name in the following form:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{}),"statefulset.kubernetes.io/pod-name\n")),Object(o.b)("p",null,"For a StatefulSet with the name ",Object(o.b)("inlineCode",{parentName:"p"},"postgresql-sfs")," the name of the first Pod will be ",Object(o.b)("inlineCode",{parentName:"p"},"postgresql-sfs-0")," and its label ",Object(o.b)("inlineCode",{parentName:"p"},"statefulset.kubernetes.io/pod-name=postgresql-sfs-0"),"."),Object(o.b)("p",null,"So instead of selecting the ",Object(o.b)("inlineCode",{parentName:"p"},"postgresql-primary")," Service's backend Pod by using the ",Object(o.b)("inlineCode",{parentName:"p"},"role=primary")," label the label ",Object(o.b)("inlineCode",{parentName:"p"},"statefulset.kubernetes.io/pod-name=postgresql-sfs-0")," is used to point to our initial primary."),Object(o.b)("p",null,"The initial Service to point to the primary can be created with the following ",Object(o.b)("inlineCode",{parentName:"p"},"65-service-primary-init.yaml")," file:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-yaml"}),"apiVersion: v1\nkind: Service\nmetadata:\n  name: postgresql-primary\n  labels:\n    app: postgresql-a\n    role: primary\nspec:\n  ports:\n  - port: 5432\n    name: postgresql-port\n  clusterIP: None\n  selector:\n      app: postgresql-a\n      # role: primary\n      statefulset.kubernetes.io/pod-name: postgresql-sfs-0\n")),Object(o.b)("p",null,"There are two labels active ",Object(o.b)("inlineCode",{parentName:"p"},"app: postgresql-a")," which selects the PostgreSQL StatefulSet from other Pods that could be residing in the same namespace as well as the ",Object(o.b)("inlineCode",{parentName:"p"},"statefulset.kubernetes.io/pod-name: postgresql-sfs-0")," which has been discussed earlier."),Object(o.b)("h2",{id:"subsequent-leader-elections"},"Subsequent Leader Elections"),Object(o.b)("p",null,"There are costs for this workaround. During subsequent leader elections the logic promoting the new primary has to:"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"Update the label of the new primary to ",Object(o.b)("inlineCode",{parentName:"li"},"role=primary"),"."),Object(o.b)("li",{parentName:"ol"},"Ensure that no other Pod of the StatefulSet has this label."),Object(o.b)("li",{parentName:"ol"},"Change the label selector of the ",Object(o.b)("inlineCode",{parentName:"li"},"postgresql-primary")," service from ",Object(o.b)("inlineCode",{parentName:"li"},"statefulset.kubernetes.io/pod-name=postgresql-sfs-0")," to ",Object(o.b)("inlineCode",{parentName:"li"},"role=primary"),".")),Object(o.b)("p",null,"Have you noticed the interesting question contained in task nr. 2? How can be ensured that only a single Pod owns the ",Object(o.b)("inlineCode",{parentName:"p"},"role=primary")," label? Can this be achieved in a single linearized, automatic operation? If not, are we creating a vulnerability here that may lead to a mutli-master situation? We leave this question to a later investigation and focus on the milestone to get a first StatefulSet with streaming replication up and running."),Object(o.b)("p",null,"Modifying the Service in a later leader election is simple:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-yaml"}),"apiVersion: v1\nkind: Service\nmetadata:\n  name: postgresql-primary\n  labels:\n    app: postgresql-a\n    role: primary\nspec:\n  ports:\n  - port: 5432\n    name: postgresql-port\n  clusterIP: None\n  selector:\n      app: postgresql-a\n      role: primary\n      # statefulset.kubernetes.io/pod-name: postgresql-sfs-0\n")),Object(o.b)("p",null,"As you can see only a single line has changed on of the selectors."),Object(o.b)("p",null,"You can edit the existing Service:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{}),"kubectl edit service postgresql-primary\n")),Object(o.b)("p",null,"Or edit your local ",Object(o.b)("inlineCode",{parentName:"p"},"65-service-primary-init.yaml")," and re-apply it. Kubernetes will notice that the Service specification has changed and apply the changed selectors."),Object(o.b)("p",null,"This will point to the Pod with both labels ",Object(o.b)("inlineCode",{parentName:"p"},"app: postgresql-a")," as well as ",Object(o.b)("inlineCode",{parentName:"p"},"role: primary"),". "),Object(o.b)("p",null,"By reassigning this label to the newly elected primary, the leader promotion takes effect."),Object(o.b)("p",null,"Later a cluster manager needs to perform failure detection and leader election. For now, it is good enough to set the label manually:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{}),"kubectl label pod postgresql-sfs-0 role=primary\n")),Object(o.b)("p",null,"Verify:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{}),"kubectl get pods -l role=primary\n")),Object(o.b)("p",null,"Output:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{}),"NAME               READY   STATUS    RESTARTS   AGE\npostgresql-sfs-0   1/1     Running   1          7d2h\n")),Object(o.b)("p",null,"You can also verify that the Service now has a endpoint:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{}),"Name:              postgresql-primary\nNamespace:         pg\nLabels:            app=postgresql-a\n                role=primary\nAnnotations:       Selector:  app=postgresql-a,role=primary\nType:              ClusterIP\nIP:                None\nPort:              postgresql-port  5432/TCP\nTargetPort:        5432/TCP\nEndpoints:         10.1.49.182:5432\nSession Affinity:  None\nEvents:            <none>\n")),Object(o.b)("p",null,"The Service with a proper backend will create a DNS entry so that the following URL will resolve: ",Object(o.b)("inlineCode",{parentName:"p"},"postgresql-primary.pg.svc.cluster.local"),"."),Object(o.b)("h2",{id:"summary"},"Summary"),Object(o.b)("p",null,"Introducing a separate Service for resolving to the current primary will later help to perform a leader promotion. However, the behavior of Labels and Services must be closely investigated whether there are sufficient guarantess provided by Kubernetes to avoid creating downtimes or multi-master situations. This will be left for future investigations."),Object(o.b)("h2",{id:"links"},"Links"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"Kubernets - Documentation - StatefulSets - Pod Name Label, ",Object(o.b)("a",Object(r.a)({parentName:"li"},{href:"https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#pod-name-label"}),"https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#pod-name-label"))))}c.isMDXComponent=!0},198:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return m}));var r=n(0),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=a.a.createContext({}),c=function(e){var t=a.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},b=function(e){var t=c(e.components);return a.a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},d=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),b=c(n),d=r,m=b["".concat(i,".").concat(d)]||b[d]||u[d]||o;return n?a.a.createElement(m,l(l({ref:t},p),{},{components:n})):a.a.createElement(m,l({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);