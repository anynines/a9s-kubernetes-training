(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{134:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"metadata",(function(){return o})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return u}));var a=n(1),s=n(6),i=(n(0),n(148)),r={id:"persistent-volumes-exercise",title:"Persistent Volumes Excercise"},o={id:"kubernetes/80-stateful-sets/persistent-volumes-exercise",title:"Persistent Volumes Excercise",description:"After going through the theory of Volumes and Persistent Volumes it's time to get your hands down. In this exercise you will create a stateful Pod using Persistent Volumes. As you will see this involves a few preliminary steps. The exercise executes on a Kubernetes cluster using `paas.anynines.com` which is the `a9s Kubernetes` automation deployed on AWS [1]. Storage is one of the places where rubber meets the road in the sense that there is a comparitively large contact surfe with infrastructure. This is why - similar to Ingresses in an earlier lesson - Persistent Volumes involve vendor specific configuration. If you look closer at the exercise you will also recognize that the Kubernetes abstraction from volume Provisioners, Storage Classes, Persistent Volume Claims, Persistent Volumes to Volumes helps to maintain the tie to a specific Kubernetes distribution to a minimum. This counteracts the initial impression why dealing with persistency in Kubernetes is so surprsingly complicated.",source:"@site/docs/kubernetes/80-stateful-sets/15-persistent-volumes-exercise.md",permalink:"/kubernetes/80-stateful-sets/persistent-volumes-exercise",sidebar:"docs",previous:{title:"Persistent Volumes",permalink:"/kubernetes/80-stateful-sets/persistent-volumes"},next:{title:"StatefulSets",permalink:"/kubernetes/80-stateful-sets/stateful-sets"}},l=[{value:"Creating a Storage Class",id:"creating-a-storage-class",children:[]},{value:"Creating a Persistent Volume Claim",id:"creating-a-persistent-volume-claim",children:[]},{value:"Tidying Up",id:"tidying-up",children:[]},{value:"Links",id:"links",children:[]}],c={rightToc:l};function u(e){var t=e.components,n=Object(s.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"After going through the theory of Volumes and Persistent Volumes it's time to get your hands down. In this exercise you will create a stateful Pod using Persistent Volumes. As you will see this involves a few preliminary steps. The exercise executes on a Kubernetes cluster using ",Object(i.b)("inlineCode",{parentName:"p"},"paas.anynines.com")," which is the ",Object(i.b)("inlineCode",{parentName:"p"},"a9s Kubernetes")," automation deployed on AWS ","[1]",". Storage is one of the places where rubber meets the road in the sense that there is a comparitively large contact surfe with infrastructure. This is why - similar to Ingresses in an earlier lesson - Persistent Volumes involve vendor specific configuration. If you look closer at the exercise you will also recognize that the Kubernetes abstraction from volume Provisioners, Storage Classes, Persistent Volume Claims, Persistent Volumes to Volumes helps to maintain the tie to a specific Kubernetes distribution to a minimum. This counteracts the initial impression why dealing with persistency in Kubernetes is so surprsingly complicated."),Object(i.b)("h2",{id:"creating-a-storage-class"},"Creating a Storage Class"),Object(i.b)("p",null,"Create a file ",Object(i.b)("inlineCode",{parentName:"p"},"05-storage-class.yaml"),":"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml"}),'apiVersion: storage.k8s.io/v1\nkind: StorageClass\nmetadata:\n    name: default\nparameters:\n    encrypted: "false"\n    type: gp2\nprovisioner: kubernetes.io/aws-ebs\nreclaimPolicy: Delete\nvolumeBindingMode: Immediate\nallowVolumeExpansion: false\n')),Object(i.b)("p",null,"This Storage Class makes use of the provisioner ",Object(i.b)("inlineCode",{parentName:"p"},"kubernetes.io/aws-ebs"),". In this particular example, the provisionier uses storage services of the Amazon Web Services ","[1]",". "),Object(i.b)("p",null,"You may ask yourself how the provisioner authenticates against the AWS API. As this is beyond the scope of this training it should suffice to say that the Kubernetes cluster administrator - or a proper automation respectively - has configured a so called Cloud Provider ","[2]",". A Cloud Provider enables access to multiple services offered by the corresponding vendor often including infrastructure affine services such as load balancing and storage."),Object(i.b)("p",null,"For now, you can be relieved as the Cloud Provider already has been configured for you."),Object(i.b)("p",null,"Create the Storage Class:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),"kubectl apply -f 05-storage-class.yaml\n")),Object(i.b)("h2",{id:"creating-a-persistent-volume-claim"},"Creating a Persistent Volume Claim"),Object(i.b)("p",null,"Create a Persistent Volume Claim:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),"kubectl apply -f 10-persistent-volume-claim.yaml\n")),Object(i.b)("p",null,"Verify that the Persistent Volume Claim has been created successfull and - most importantly - that a Persistent Volume has been claimed:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),"kubectl get pvc -w\n")),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"-w")," option will update the the output continuously. You can interupt it using ",Object(i.b)("inlineCode",{parentName:"p"},"<CTRL>+C"),"."),Object(i.b)("p",null,"Output should look similar to:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),"NAME              STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS   AGE\nsimple-pv-claim   Bound    pvc-7a0e4339-9e64-4740-9adb-a509a6aac328   1Gi        RWO            default        49s\n")),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"STATUS")," field should say ",Object(i.b)("inlineCode",{parentName:"p"},"BOUND"),'and thus indicate that an actual Persistent Volume has been found and "bound" to the Persistent Volume Claim.'),Object(i.b)("p",null,"In this case - with knowledge about the ",Object(i.b)("inlineCode",{parentName:"p"},"default")," Storage Clase you have created before, we know how this has happened."),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"kubernetes.io/aws-ebs")," Provisionier has created a Persistent Volume according to the needs specified in the Persistent Volume Claim. This is illustrated when describing the PVC:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),"kubectl describe pvc simple-pv-claim\n")),Object(i.b)("p",null,"The output should look like this:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),'Name:          simple-pv-claim\nNamespace:     k8s-training-test\nStorageClass:  default\nStatus:        Bound\nVolume:        pvc-7a0e4339-9e64-4740-9adb-a509a6aac328\nLabels:        <none>\nAnnotations:   kubectl.kubernetes.io/last-applied-configuration:\n                {"apiVersion":"v1","kind":"PersistentVolumeClaim","metadata":{"annotations":{},"name":"simple-pv-claim","namespace":"k8s-training-test"},"...\n            pv.kubernetes.io/bind-completed: yes\n            pv.kubernetes.io/bound-by-controller: yes\n            volume.beta.kubernetes.io/storage-provisioner: kubernetes.io/aws-ebs\nFinalizers:    [kubernetes.io/pvc-protection]\nCapacity:      1Gi\nAccess Modes:  RWO\nVolumeMode:    Filesystem\nEvents:\nType       Reason                 Age   From                         Message\n----       ------                 ----  ----                         -------\nNormal     ProvisioningSucceeded  7m6s  persistentvolume-controller  Successfully provisioned volume pvc-7a0e4339-9e64-4740-9adb-a509a6aac328 using kubernetes.io/aws-ebs\nMounted By:  <none>        \n')),Object(i.b)("p",null,"This provides you with the information that:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"The provisioner ",Object(i.b)("inlineCode",{parentName:"li"},"kubernetes.io/aws-ebs")," has created a Persistent Volume with the id ",Object(i.b)("inlineCode",{parentName:"li"},"pvc-7a0e4339-9e64-4740-9adb-a509a6aac328"),"."),Object(i.b)("li",{parentName:"ul"},"The Persistent Volume is a Filesystem (",Object(i.b)("inlineCode",{parentName:"li"},"VolumeMode: Filesystem"),")."),Object(i.b)("li",{parentName:"ul"},"The Persistent Volume is currently not mounted.")),Object(i.b)("p",null,"Hence, it's time to create a Pod and mount the Persistent Volume."),Object(i.b)("p",null,"Create a file ",Object(i.b)("inlineCode",{parentName:"p"},"20-pod-writing-to-volume.yaml"),":"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml"}),'apiVersion: v1\nkind: Pod\nmetadata:\nname: simple-pv-pod\nspec:\nvolumes:\n    - name: simple-pv-storage\n    persistentVolumeClaim:\n        claimName: simple-pv-claim\ncontainers:\n    - name: simple-pv-container\n    image: busybox\n    command: ["/bin/sh"]\n    args: ["-c", "echo Hello World > /my-persistent-data/helloworld.txt"]\n    volumeMounts:\n        - mountPath: "/my-persistent-data"\n        name: simple-pv-storage\nrestartPolicy: Never\n')),Object(i.b)("p",null,"Which creates a Pod writing a simple text file ",Object(i.b)("inlineCode",{parentName:"p"},"/my-persistent-data/helloworld.txt")," containing the String ",Object(i.b)("inlineCode",{parentName:"p"},"Hello World"),"."),Object(i.b)("p",null,"So now there is data on the disk of this Pod which will terminate after its execution."),Object(i.b)("p",null,"Create another Pod, mount the same Persistent Volume and read the data printing it to the STDOUT:"),Object(i.b)("p",null,"Create a file ",Object(i.b)("inlineCode",{parentName:"p"},"30-pod-reading-from-volume.yaml"),":"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml"}),'apiVersion: v1\nkind: Pod\nmetadata:\nname: simple-pv-pod-reader\nspec:\nvolumes:\n    - name: simple-pv-storage\n    persistentVolumeClaim:\n        claimName: simple-pv-claim\ncontainers:\n    - name: simple-pv-container\n    image: busybox\n    command: ["/bin/sh"]\n    args: ["-c", "cat /my-persistent-data/helloworld.txt"]\n    volumeMounts:\n        - mountPath: "/my-persistent-data"\n        name: simple-pv-storage\nrestartPolicy: Never\n')),Object(i.b)("p",null,"And retrieve the Pods logs:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),"kubectl logs simple-pv-pod-reader\n")),Object(i.b)("p",null,"Which should output:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),"Hello World\n")),Object(i.b)("h2",{id:"tidying-up"},"Tidying Up"),Object(i.b)("p",null,"Remove created objects:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),"kubectl delete pod simple-pv-pod\nkubectl delete pod simple-pv-pod-reader\n")),Object(i.b)("p",null,"Execute:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),"kubectl get pvc\n")),Object(i.b)("p",null,"Can you see that the Persistent Volume Claim and the Persistent Volume still exists? Their lifecycle is independent from the lifecycle of the Pods you have created. So it's worth keeping in mind that the lifecycle is a major difference between Volumes and Persistent Volumes."),Object(i.b)("p",null,"Delete the Persistent Volume Claim:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),"kubectl delete pvc simple-pv-claim\n")),Object(i.b)("p",null,"And ensure that the associated persistent volume has been deleted, too:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),"kubectl get pv\n")),Object(i.b)("p",null,"And it's gone."),Object(i.b)("p",null,"You have learned how to create a Persistent Volume using a Persistent Volume Claim. Although this example uses a Pod for illustration purposes, you are more likely to use Persistent Volumes as part of StatefulSets."),Object(i.b)("h2",{id:"links"},"Links"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Amazon Web Services, ",Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"http://aws.amazon.com/"}),"http://aws.amazon.com/")),Object(i.b)("li",{parentName:"ol"},"Kubernetes Documentation, Concepts, Cluster-Administration, Cloud Providers, ",Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"https://kubernetes.io/docs/concepts/cluster-administration/cloud-providers/#aws"}),"https://kubernetes.io/docs/concepts/cluster-administration/cloud-providers/#aws"))))}u.isMDXComponent=!0},148:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return d}));var a=n(0),s=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,s=function(e,t){if(null==e)return{};var n,a,s={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var c=s.a.createContext({}),u=function(e){var t=s.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o({},t,{},e)),n},p=function(e){var t=u(e.components);return s.a.createElement(c.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return s.a.createElement(s.a.Fragment,{},t)}},m=Object(a.forwardRef)((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,r=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(n),m=a,d=p["".concat(r,".").concat(m)]||p[m]||b[m]||i;return n?s.a.createElement(d,o({ref:t},c,{components:n})):s.a.createElement(d,o({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,r=new Array(i);r[0]=m;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:a,r[1]=o;for(var c=2;c<i;c++)r[c]=n[c];return s.a.createElement.apply(null,r)}return s.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);