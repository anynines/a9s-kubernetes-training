(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{137:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return l})),n.d(t,"metadata",(function(){return o})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return b}));var a=n(2),i=n(9),r=(n(0),n(198)),l={},o={id:"postgresql/20-postgresql-theory/zzz-archive",isDocsHomePage:!1,title:"zzz-archive",description:"Open Loops",source:"@site/docs/postgresql/20-postgresql-theory/zzz-archive.md",permalink:"/postgresql/20-postgresql-theory/zzz-archive"},c=[{value:"Replication using WAL Shipping",id:"replication-using-wal-shipping",children:[{value:"WAL Records",id:"wal-records",children:[]},{value:"WAL Streaming vs. WAL File Shipping",id:"wal-streaming-vs-wal-file-shipping",children:[]},{value:"On each Secondary",id:"on-each-secondary",children:[]}]},{value:"Monitoring",id:"monitoring",children:[]},{value:"Replication Slots",id:"replication-slots",children:[]},{value:"Basebackup with <code>pg_basebackup</code>",id:"basebackup-with-pg_basebackup",children:[]}],s={rightToc:c};function b(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("h1",{id:"open-loops"},"Open Loops"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Set max_wal_senders"),Object(r.b)("li",{parentName:"ul"},"Ensure keeping WAL segments long enough. replication slots?")),Object(r.b)("h1",{id:"archive"},"Archive"),Object(r.b)("p",null,"This page contains left over paragraphs from variuous pages of this chapter."),Object(r.b)("h2",{id:"replication-using-wal-shipping"},"Replication using WAL Shipping"),Object(r.b)("h3",{id:"wal-records"},"WAL Records"),Object(r.b)("h3",{id:"wal-streaming-vs-wal-file-shipping"},"WAL Streaming vs. WAL File Shipping"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Replication lag with WAL streaming typically < 1s ","[1]")),Object(r.b)("p",null,"Deep:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},'"With streaming replication, ',Object(r.b)("inlineCode",{parentName:"p"},"archive_timeout"),' is not required to reduce the data loss window." ',"[1]")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},'"If you use streaming replication without file-based continuous archiving, the server might recycle old WAL segments before the standby has received them." ',"[1]"),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},'"If this occurs, the standby will need to be reinitialized from a new base backup" ',"[1]"),Object(r.b)("li",{parentName:"ul"},"JF: This sounds like a scenario we'd like to provoke or avoid (by using file-based continuous archiving)",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Avoid: ",Object(r.b)("ol",{parentName:"li"},Object(r.b)("li",{parentName:"ol"},"set ",Object(r.b)("inlineCode",{parentName:"li"},"wal_keep_segments")," high enough")),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"WAL segements won't be recycled, too early.")),Object(r.b)("ol",Object(a.a)({parentName:"li"},{start:2}),Object(r.b)("li",{parentName:"ol"},"Configure a replication slot for the standby"),Object(r.b)("li",{parentName:"ol"},"If you setup a WAL archive that's accessible from the standby, these solutions are not required.")),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"The standby can always use the archive to catch up provided it retains enough segments.")))))))),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Set up a file-based log-shiping standby server"),Object(r.b)("li",{parentName:"ul"},"The step that ",Object(r.b)("strong",{parentName:"li"},"turns a file-based log-shipping standby into a streamin replication standby")," is setting the ",Object(r.b)("inlineCode",{parentName:"li"},"primary_conninfo")," setting to point to the primary server")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Set the ",Object(r.b)("inlineCode",{parentName:"li"},"listen_addresses"),"and authentication options on the primary so that the standby server can connect to the ",Object(r.b)("inlineCode",{parentName:"li"},"replication")," pseudo-database on the primary server"),Object(r.b)("li",{parentName:"ul"},"Set keepalice socket options if supported"),Object(r.b)("li",{parentName:"ul"},"Set the maximum number of concurrent connections from the standby servers (",Object(r.b)("inlineCode",{parentName:"li"},"max_wal_senders"),")"),Object(r.b)("li",{parentName:"ul"},"When the standby is started and ",Object(r.b)("inlineCode",{parentName:"li"},"primary_conninfo")," is set correctly, the standby will connect to the primary after replaying all WAL files available in the archive.",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"If the connection is established successfully, you will see a walreceiver process in the standby,\nand a corresponding walsender process in the primary.")))),Object(r.b)("h3",{id:"on-each-secondary"},"On each Secondary"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"the ",Object(r.b)("inlineCode",{parentName:"li"},"pg_basebackup")," command will also create $PGDATA/postgresql.auto.conf",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"this also sets the ",Object(r.b)("inlineCode",{parentName:"li"},"primary_conninfo")," attribute so that this does not have to done manually.")))),Object(r.b)("p",null,"Start PostgreSQL"),Object(r.b)("h4",{id:"proceed-with-replication-slots"},"Proceed With Replication Slots"),Object(r.b)("h4",{id:"proceed-with-synchronous-replication"},"Proceed With Synchronous Replication"),Object(r.b)("h2",{id:"monitoring"},"Monitoring"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"An important health indicator of streaming replication is the amount of WAL records generated in the primary but not yet applied in the standby.",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"You can calculate this lag by comparing the current WAL write location on the primary with the last WAL location received by the standby.",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"These locations can be retrieved using ",Object(r.b)("inlineCode",{parentName:"li"},"pg_current_wal_ln"),"on the primary and ",Object(r.b)("inlineCode",{parentName:"li"},"pg_last_wal_receive_lsn")," on the stanbdy."))),Object(r.b)("li",{parentName:"ul"},"The last WAL receive location in the standby is also displayed in the process status of the WAL receiver process.\nYou can display this using the ",Object(r.b)("inlineCode",{parentName:"li"},"ps")," command."))),Object(r.b)("li",{parentName:"ul"},"You can retrieve a list of WAL sender processes via the ",Object(r.b)("inlineCode",{parentName:"li"},"pg_stat_replication"),"view. ",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Large differences between ",Object(r.b)("inlineCode",{parentName:"li"},"pg_current_wal_lsn"),"and the view's ",Object(r.b)("inlineCode",{parentName:"li"},"send_lsn"),"field might ",Object(r.b)("strong",{parentName:"li"},"indicate that the master server is under heavy load"),", ",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"while differences between ",Object(r.b)("inlineCode",{parentName:"li"},"sent_lsn"),"and ",Object(r.b)("inlineCode",{parentName:"li"},"pg_last_wal_receive_lsn")," on the standby might ",Object(r.b)("strong",{parentName:"li"},"indicate network delay"),", or that the standby is under heavy load."))))),Object(r.b)("li",{parentName:"ul"},"On a standby, the status of the WAL receiver process can be retrieved via the ",Object(r.b)("inlineCode",{parentName:"li"},"pg_stat_wal_receiver")," view.\nA large difference between ",Object(r.b)("inlineCode",{parentName:"li"},"\xfcg_last_wal_replay_lsn"),"and the view's ",Object(r.b)("inlineCode",{parentName:"li"},"received_lsn")," ",Object(r.b)("strong",{parentName:"li"},"indicates that WAL is being received faster than it can be relayed"),".")),Object(r.b)("h2",{id:"replication-slots"},"Replication Slots"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Replication Slots provide an automated way to ensure that the master does not remove WAL setments until they have been received by all standbys.",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"and that the master does not remove rows which could cause recovery conflict even when the standby is disconnected."))),Object(r.b)("li",{parentName:"ul"},"Only the number of WAL segements will be kept which are needed for the replication"),Object(r.b)("li",{parentName:"ul"},"The drawback of ",Object(r.b)("inlineCode",{parentName:"li"},"replication slots")," is that it is not possible to limit the space requirement for ",Object(r.b)("inlineCode",{parentName:"li"},"pg_wal"),".",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"JF: This may cause ",Object(r.b)("inlineCode",{parentName:"li"},"disk full")," issues.")))),Object(r.b)("p",null,"... To be continued"),Object(r.b)("h2",{id:"basebackup-with-pg_basebackup"},"Basebackup with ",Object(r.b)("inlineCode",{parentName:"h2"},"pg_basebackup")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"TODO")," Veryify this statement."),Object(r.b)("p",null,"This is only necessary when a node joins the cluster for the first time."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"This step needs to be performed on each Secondary"),"."),Object(r.b)("p",null,"The Service ",Object(r.b)("inlineCode",{parentName:"p"},"postgresql-primary")," can be used to refer to the Primary node as it provides the following, stable DNS entry: ",Object(r.b)("inlineCode",{parentName:"p"},"postgresql-primary.pg.svc.cluster.local"),"."),Object(r.b)("p",null,"Remove existing data:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{}),"rm -rf /var/lib/postgresql/data/pgdata\n")),Object(r.b)("p",null,"Perform the pg_basebackup:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{}),"pg_basebackup -h postgresql-primary.pg.svc.cluster.local -U replicator -p 5432 -D $PGDATA -Fp -Xs -P -R\n")))}b.isMDXComponent=!0},198:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return h}));var a=n(0),i=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=i.a.createContext({}),b=function(e){var t=i.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=b(e.components);return i.a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},d=i.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),p=b(n),d=a,h=p["".concat(l,".").concat(d)]||p[d]||u[d]||r;return n?i.a.createElement(h,o(o({ref:t},s),{},{components:n})):i.a.createElement(h,o({ref:t},s))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,l=new Array(r);l[0]=d;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var s=2;s<r;s++)l[s]=n[s];return i.a.createElement.apply(null,l)}return i.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);