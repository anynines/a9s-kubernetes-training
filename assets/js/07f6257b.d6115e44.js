"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[5213],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return h}});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=p(n),h=i,m=d["".concat(s,".").concat(h)]||d[h]||u[h]||r;return n?a.createElement(m,l(l({ref:t},c),{},{components:n})):a.createElement(m,l({ref:t},c))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:i,l[1]=o;for(var p=2;p<r;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},51875:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return c},default:function(){return d}});var a=n(87462),i=n(63366),r=(n(67294),n(3905)),l=["components"],o={},s="Open Loops",p={unversionedId:"postgresql/postgresql-theory/zzz-archive",id:"postgresql/postgresql-theory/zzz-archive",isDocsHomePage:!1,title:"Open Loops",description:"* Set maxwalsenders",source:"@site/docs/postgresql/20-postgresql-theory/zzz-archive.md",sourceDirName:"postgresql/20-postgresql-theory",slug:"/postgresql/postgresql-theory/zzz-archive",permalink:"/postgresql/postgresql-theory/zzz-archive",tags:[],version:"current",frontMatter:{}},c=[{value:"Replication using WAL Shipping",id:"replication-using-wal-shipping",children:[{value:"WAL Records",id:"wal-records",children:[]},{value:"WAL Streaming vs. WAL File Shipping",id:"wal-streaming-vs-wal-file-shipping",children:[]},{value:"On each Secondary",id:"on-each-secondary",children:[]}]},{value:"Monitoring",id:"monitoring",children:[]},{value:"Replication Slots",id:"replication-slots",children:[]},{value:"Basebackup with <code>pg_basebackup</code>",id:"basebackup-with-pg_basebackup",children:[]}],u={toc:c};function d(e){var t=e.components,n=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"open-loops"},"Open Loops"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Set max_wal_senders"),(0,r.kt)("li",{parentName:"ul"},"Ensure keeping WAL segments long enough. replication slots?")),(0,r.kt)("h1",{id:"archive"},"Archive"),(0,r.kt)("p",null,"This page contains left over paragraphs from variuous pages of this chapter."),(0,r.kt)("h2",{id:"replication-using-wal-shipping"},"Replication using WAL Shipping"),(0,r.kt)("h3",{id:"wal-records"},"WAL Records"),(0,r.kt)("h3",{id:"wal-streaming-vs-wal-file-shipping"},"WAL Streaming vs. WAL File Shipping"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Replication lag with WAL streaming typically < 1s ","[1]")),(0,r.kt)("p",null,"Deep:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},'"With streaming replication, ',(0,r.kt)("inlineCode",{parentName:"p"},"archive_timeout"),' is not required to reduce the data loss window." ',"[1]")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},'"If you use streaming replication without file-based continuous archiving, the server might recycle old WAL segments before the standby has received them." ',"[1]"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},'"If this occurs, the standby will need to be reinitialized from a new base backup" ',"[1]"),(0,r.kt)("li",{parentName:"ul"},"JF: This sounds like a scenario we'd like to provoke or avoid (by using file-based continuous archiving)",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Avoid: ",(0,r.kt)("ol",{parentName:"li"},(0,r.kt)("li",{parentName:"ol"},"set ",(0,r.kt)("inlineCode",{parentName:"li"},"wal_keep_segments")," high enough")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"WAL segements won't be recycled, too early.")),(0,r.kt)("ol",{parentName:"li",start:2},(0,r.kt)("li",{parentName:"ol"},"Configure a replication slot for the standby"),(0,r.kt)("li",{parentName:"ol"},"If you setup a WAL archive that's accessible from the standby, these solutions are not required.")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"The standby can always use the archive to catch up provided it retains enough segments.")))))))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Set up a file-based log-shiping standby server"),(0,r.kt)("li",{parentName:"ul"},"The step that ",(0,r.kt)("strong",{parentName:"li"},"turns a file-based log-shipping standby into a streamin replication standby")," is setting the ",(0,r.kt)("inlineCode",{parentName:"li"},"primary_conninfo")," setting to point to the primary server")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Set the ",(0,r.kt)("inlineCode",{parentName:"li"},"listen_addresses"),"and authentication options on the primary so that the standby server can connect to the ",(0,r.kt)("inlineCode",{parentName:"li"},"replication")," pseudo-database on the primary server"),(0,r.kt)("li",{parentName:"ul"},"Set keepalice socket options if supported"),(0,r.kt)("li",{parentName:"ul"},"Set the maximum number of concurrent connections from the standby servers (",(0,r.kt)("inlineCode",{parentName:"li"},"max_wal_senders"),")"),(0,r.kt)("li",{parentName:"ul"},"When the standby is started and ",(0,r.kt)("inlineCode",{parentName:"li"},"primary_conninfo")," is set correctly, the standby will connect to the primary after replaying all WAL files available in the archive.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"If the connection is established successfully, you will see a walreceiver process in the standby,\nand a corresponding walsender process in the primary.")))),(0,r.kt)("h3",{id:"on-each-secondary"},"On each Secondary"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"the ",(0,r.kt)("inlineCode",{parentName:"li"},"pg_basebackup")," command will also create $PGDATA/postgresql.auto.conf",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"this also sets the ",(0,r.kt)("inlineCode",{parentName:"li"},"primary_conninfo")," attribute so that this does not have to done manually.")))),(0,r.kt)("p",null,"Start PostgreSQL"),(0,r.kt)("h4",{id:"proceed-with-replication-slots"},"Proceed With Replication Slots"),(0,r.kt)("h4",{id:"proceed-with-synchronous-replication"},"Proceed With Synchronous Replication"),(0,r.kt)("h2",{id:"monitoring"},"Monitoring"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"An important health indicator of streaming replication is the amount of WAL records generated in the primary but not yet applied in the standby.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"You can calculate this lag by comparing the current WAL write location on the primary with the last WAL location received by the standby.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"These locations can be retrieved using ",(0,r.kt)("inlineCode",{parentName:"li"},"pg_current_wal_ln"),"on the primary and ",(0,r.kt)("inlineCode",{parentName:"li"},"pg_last_wal_receive_lsn")," on the stanbdy."))),(0,r.kt)("li",{parentName:"ul"},"The last WAL receive location in the standby is also displayed in the process status of the WAL receiver process.\nYou can display this using the ",(0,r.kt)("inlineCode",{parentName:"li"},"ps")," command."))),(0,r.kt)("li",{parentName:"ul"},"You can retrieve a list of WAL sender processes via the ",(0,r.kt)("inlineCode",{parentName:"li"},"pg_stat_replication"),"view. ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Large differences between ",(0,r.kt)("inlineCode",{parentName:"li"},"pg_current_wal_lsn"),"and the view's ",(0,r.kt)("inlineCode",{parentName:"li"},"send_lsn"),"field might ",(0,r.kt)("strong",{parentName:"li"},"indicate that the master server is under heavy load"),", ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"while differences between ",(0,r.kt)("inlineCode",{parentName:"li"},"sent_lsn"),"and ",(0,r.kt)("inlineCode",{parentName:"li"},"pg_last_wal_receive_lsn")," on the standby might ",(0,r.kt)("strong",{parentName:"li"},"indicate network delay"),", or that the standby is under heavy load."))))),(0,r.kt)("li",{parentName:"ul"},"On a standby, the status of the WAL receiver process can be retrieved via the ",(0,r.kt)("inlineCode",{parentName:"li"},"pg_stat_wal_receiver")," view.\nA large difference between ",(0,r.kt)("inlineCode",{parentName:"li"},"\xfcg_last_wal_replay_lsn"),"and the view's ",(0,r.kt)("inlineCode",{parentName:"li"},"received_lsn")," ",(0,r.kt)("strong",{parentName:"li"},"indicates that WAL is being received faster than it can be relayed"),".")),(0,r.kt)("h2",{id:"replication-slots"},"Replication Slots"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Replication Slots provide an automated way to ensure that the master does not remove WAL setments until they have been received by all standbys.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"and that the master does not remove rows which could cause recovery conflict even when the standby is disconnected."))),(0,r.kt)("li",{parentName:"ul"},"Only the number of WAL segements will be kept which are needed for the replication"),(0,r.kt)("li",{parentName:"ul"},"The drawback of ",(0,r.kt)("inlineCode",{parentName:"li"},"replication slots")," is that it is not possible to limit the space requirement for ",(0,r.kt)("inlineCode",{parentName:"li"},"pg_wal"),".",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"JF: This may cause ",(0,r.kt)("inlineCode",{parentName:"li"},"disk full")," issues.")))),(0,r.kt)("p",null,"... To be continued"),(0,r.kt)("h2",{id:"basebackup-with-pg_basebackup"},"Basebackup with ",(0,r.kt)("inlineCode",{parentName:"h2"},"pg_basebackup")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"TODO")," Veryify this statement."),(0,r.kt)("p",null,"This is only necessary when a node joins the cluster for the first time."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"This step needs to be performed on each Secondary"),"."),(0,r.kt)("p",null,"The Service ",(0,r.kt)("inlineCode",{parentName:"p"},"postgresql-primary")," can be used to refer to the Primary node as it provides the following, stable DNS entry: ",(0,r.kt)("inlineCode",{parentName:"p"},"postgresql-primary.pg.svc.cluster.local"),"."),(0,r.kt)("p",null,"Remove existing data:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"rm -rf /var/lib/postgresql/data/pgdata\n")),(0,r.kt)("p",null,"Perform the pg_basebackup:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"pg_basebackup -h postgresql-primary.pg.svc.cluster.local -U replicator -p 5432 -D $PGDATA -Fp -Xs -P -R\n")))}d.isMDXComponent=!0}}]);