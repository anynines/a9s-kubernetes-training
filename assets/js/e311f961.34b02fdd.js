"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1446],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return y}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=r.createContext({}),p=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(i.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},b=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(n),b=o,y=c["".concat(i,".").concat(b)]||c[b]||d[b]||a;return n?r.createElement(y,s(s({ref:t},u),{},{components:n})):r.createElement(y,s({ref:t},u))}));function y(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=b;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l[c]="string"==typeof e?e:o,s[1]=l;for(var p=2;p<a;p++)s[p]=n[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}b.displayName="MDXCreateElement"},2788:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return i},default:function(){return y},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return c}});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),s=["components"],l={slug:"/advanced-kubernetes/pod-restart-policy",id:"pod-restart-policy",title:"Pod Restart Policy"},i=void 0,p={unversionedId:"kubernetes2/module-advanced-pods/pod-restart-policy",id:"kubernetes2/module-advanced-pods/pod-restart-policy",title:"Pod Restart Policy",description:"A Pod's restartPolicy determines what happens when a Pod exits. The exit can be due to Pod completion or failure.",source:"@site/docs/kubernetes2/module-advanced-pods/12-restart-policy.md",sourceDirName:"kubernetes2/module-advanced-pods",slug:"/advanced-kubernetes/pod-restart-policy",permalink:"/advanced-kubernetes/pod-restart-policy",draft:!1,tags:[],version:"current",sidebarPosition:12,frontMatter:{slug:"/advanced-kubernetes/pod-restart-policy",id:"pod-restart-policy",title:"Pod Restart Policy"},sidebar:"docs",previous:{title:"Readiness and Startup Probes Exercise",permalink:"/advanced-kubernetes/readines-startup-probe-exercise"},next:{title:"Changelog",permalink:"/changelog"}},u={},c=[{value:"Explore Pod Restart Polices",id:"explore-pod-restart-polices",level:2},{value:"Restart Policy <code>Never</code>",id:"restart-policy-never",level:3},{value:"Restart Policy <code>Always</code>",id:"restart-policy-always",level:3},{value:"Restart Policy <code>OnFailure</code>",id:"restart-policy-onfailure",level:3}],d={toc:c},b="wrapper";function y(e){var t=e.components,n=(0,o.Z)(e,s);return(0,a.kt)(b,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"A Pod's ",(0,a.kt)("inlineCode",{parentName:"p"},"restartPolicy")," determines what happens when a Pod exits. The exit can be due to Pod completion or failure. "),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"restartPolicy")," applies to all containers in the Pod."),(0,a.kt)("h2",{id:"explore-pod-restart-polices"},"Explore Pod Restart Polices"),(0,a.kt)("p",null,"Possible values for the ",(0,a.kt)("inlineCode",{parentName:"p"},"restartPolicy")," are:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Always"),": Restart the Pod for both exit reasons completion and failure."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"OnFailure"),": Restart only if the Pod has failed."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Never"),": Don't restart the Pod at all.")),(0,a.kt)("p",null,"If no ",(0,a.kt)("inlineCode",{parentName:"p"},"restartPolicy")," is specified, the value ",(0,a.kt)("inlineCode",{parentName:"p"},"Always")," is set as a default."),(0,a.kt)("h3",{id:"restart-policy-never"},"Restart Policy ",(0,a.kt)("inlineCode",{parentName:"h3"},"Never")),(0,a.kt)("p",null,"The following command starts a Pod opening an interactive ",(0,a.kt)("inlineCode",{parentName:"p"},"sh")," shell in a Pod with a single container using the ",(0,a.kt)("inlineCode",{parentName:"p"},"restartPolicy: Never"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"kubectl run -i --tty busybox --image=busybox --restart=Never -- sh\n")),(0,a.kt)("p",null,"When typing ",(0,a.kt)("inlineCode",{parentName:"p"},"exit"),", the ",(0,a.kt)("inlineCode",{parentName:"p"},"sh")," shell process and thus the Pod exits. "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"kubectl run -i --tty busybox --image=busybox --restart=Always -- sh\n")),(0,a.kt)("p",null,"Consequently,"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"kubectl get pods\n")),(0,a.kt)("p",null,"will show that the Pod has completed:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"NAME            READY   STATUS      RESTARTS   AGE\nbusybox         0/1     Completed   0          8s\n")),(0,a.kt)("p",null,"The Pod is still there but it's not running and won't be restarted. "),(0,a.kt)("p",null,"We can now remove it entirely:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"kubectl delete pod busybox\n")),(0,a.kt)("h3",{id:"restart-policy-always"},"Restart Policy ",(0,a.kt)("inlineCode",{parentName:"h3"},"Always")),(0,a.kt)("p",null,"Creating a Pod with ",(0,a.kt)("inlineCode",{parentName:"p"},"restartPolicy: Always"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"kubectl run -i --tty busybox --image=busybox --restart=Always -- sh\n")),(0,a.kt)("p",null,"When the shell is existed again, watch what happens:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"NAME            READY   STATUS     RESTARTS   AGE\nbusybox         0/1     Pending    0          0s\nbusybox         0/1     ContainerCreating   0          0s\nbusybox         1/1     Running             0          2s\nbusybox         0/1     Completed           0          5s\nbusybox         1/1     Running             1 (2s ago)   7s\n")),(0,a.kt)("p",null,"First, the Pod has been created opening the interactive shell. Then, when the shell has been existed, the Pod has completed just to be restarted and become ",(0,a.kt)("inlineCode",{parentName:"p"},"Running")," again."),(0,a.kt)("h3",{id:"restart-policy-onfailure"},"Restart Policy ",(0,a.kt)("inlineCode",{parentName:"h3"},"OnFailure")),(0,a.kt)("p",null,"Similarly, a Pod would be restarted in case of a failure. "),(0,a.kt)("p",null,"In man Linux/Unix systems a non-zero exit values sugggests that the process has failed. Based on this, Kubernetes interprets container processes existing with non-zero values to be failed, too."),(0,a.kt)("p",null,"Hence, a failing Pod can be simulated by executing a shell and running the command ",(0,a.kt)("inlineCode",{parentName:"p"},"exit 1"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'kubectl run -i --tty busybox --image=busybox --restart=OnFailure -- sh -c "exit 1"\n')),(0,a.kt)("p",null,"The output will show something similar to:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"NAME      READY   STATUS   RESTARTS     AGE\nbusybox   0/1     Error    1 (4s ago)   5s\nbusybox   0/1     CrashLoopBackOff   1 (2s ago)   6s\nbusybox   0/1     Error              2 (18s ago)   22s\nbusybox   0/1     CrashLoopBackOff   2 (16s ago)   37s\nbusybox   0/1     Error              3 (31s ago)   52s\nbusybox   0/1     CrashLoopBackOff   3 (16s ago)   68s\nbusybox   0/1     Error              4 (43s ago)   95s\nbusybox   0/1     CrashLoopBackOff   4 (14s ago)   109s\nbusybox   0/1     Error              5 (94s ago)   3m9s\nbusybox   0/1     CrashLoopBackOff   5 (13s ago)   3m21s\nbusybox   0/1     Error              6 (2m54s ago)   6m2s\nbusybox   0/1     CrashLoopBackOff   6 (16s ago)     6m17s\nbusybox   0/1     Error              7 (5m5s ago)    11m\nbusybox   0/1     CrashLoopBackOff   7 (15s ago)     11m\nbusybox   0/1     Error              8 (5m10s ago)   16m\nbusybox   0/1     CrashLoopBackOff   8 (12s ago)     16m\n")),(0,a.kt)("p",null,"There are multiple lessons here:"),(0,a.kt)("p",null,"First, the restart policy ",(0,a.kt)("inlineCode",{parentName:"p"},"OnFailure")," has lead Kubernetes to restart the failing Pod as expected."),(0,a.kt)("p",null,"Second, looking at the ",(0,a.kt)("inlineCode",{parentName:"p"},"AGE")," column of the output, the ",(0,a.kt)("strong",{parentName:"p"},"exponential back-off delay (10s, 20s, 40s, ...)")," becomes apparent. Each attempt to restart the Pod is delayed twice as long as the prior attempt until the upper boundary of 5 minutes is reached. Subsequent attempts will then be scheduled every 5 minutes. This timer is reset 10 minutes after starting the Pod successfully. In this case: never."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Tidy up"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"kubectl delete pod busybox\n")))}y.isMDXComponent=!0}}]);