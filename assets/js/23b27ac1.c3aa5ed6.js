"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[4837],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return m}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),p=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=p(r),m=a,h=d["".concat(s,".").concat(m)]||d[m]||c[m]||o;return r?n.createElement(h,i(i({ref:t},u),{},{components:r})):n.createElement(h,i({ref:t},u))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=r[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},2326:function(e,t,r){r.r(t),r.d(t,{assets:function(){return u},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return c}});var n=r(3117),a=r(102),o=(r(7294),r(3905)),i=["components"],l={id:"pg-service-primary",title:"Service to Connect to the Primary"},s=void 0,p={unversionedId:"postgresql/building-the-pg-stateful-set/pg-service-primary",id:"postgresql/building-the-pg-stateful-set/pg-service-primary",title:"Service to Connect to the Primary",description:"In the long run it must be possible to perform a leader election and leader promotion.",source:"@site/docs/postgresql/40-building-the-pg-stateful-set/15-service-primary.md",sourceDirName:"postgresql/40-building-the-pg-stateful-set",slug:"/postgresql/building-the-pg-stateful-set/pg-service-primary",permalink:"/postgresql/building-the-pg-stateful-set/pg-service-primary",draft:!1,tags:[],version:"current",sidebarPosition:15,frontMatter:{id:"pg-service-primary",title:"Service to Connect to the Primary"},sidebar:"docs",previous:{title:"StatefulSets Revisited",permalink:"/postgresql/stateful-sets-revisited/stateful-sets-revisited"},next:{title:"Streaming Replication ConfigMaps",permalink:"/postgresql/building-the-pg-stateful-set/streaming-replication-configmaps"}},u={},c=[{value:"A Pointer to the Primary",id:"a-pointer-to-the-primary",level:2},{value:"Subsequent Leader Elections",id:"subsequent-leader-elections",level:2},{value:"Summary",id:"summary",level:2},{value:"Links",id:"links",level:2}],d={toc:c};function m(e){var t=e.components,r=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"In the long run it must be possible to perform a leader election and leader promotion. "),(0,o.kt)("p",null,"The leader election algorithm will form a quorum and propose a new leader. The proposed leader will then have to be promoted to become the actual leader. In other words: any secondary may become the new primary eventually."),(0,o.kt)("p",null,"For now, we don't want to dive deeply into the details of leader election and leader promotion. So enough to say that ",(0,o.kt)("strong",{parentName:"p"},'during the promotion of a leader, the "pointer" to the primary server must be in control of the leader promotion algorithm'),"."),(0,o.kt)("p",null,"In the previous chapter we have investigated how the headless Service of a StatefulSet creates ",(0,o.kt)("inlineCode",{parentName:"p"},"SRV")," DNS entries acting as pointers to the StatefulSet's Pods. The problem with these DNS entries is that they are static. It's not a bug, it's a feature as we wished for a stable network identity of a Pod. In contrast to the volatile identity of Pods, for example in a ReplicaSet."),(0,o.kt)("p",null,"However, in this case of leader election more control over the headless Service's backend Pods is required. For this reason it is helpful to ",(0,o.kt)("strong",{parentName:"p"},"create another instance of a headless Service which will always point to the current primary"),"."),(0,o.kt)("h2",{id:"a-pointer-to-the-primary"},"A Pointer to the Primary"),(0,o.kt)("p",null,"The idea of the headless Service as a pointer to the current primary is simple: using a label such as ",(0,o.kt)("inlineCode",{parentName:"p"},"role=primary")," applied to the primary Pod. This headless Service, let's call it ",(0,o.kt)("inlineCode",{parentName:"p"},"postgresql-primary")," will be using according label as a selector. "),(0,o.kt)("p",null,"Before we explain how this will look like in a YAML specification, an undesired complication needs to be discussed: ",(0,o.kt)("strong",{parentName:"p"},"bootstrapping a StatefulSet"),". When bootstrapping a StatefulSet for the first time, no leader has been elected. Thus, none of the Pods of the StatefulSet is labeled as ",(0,o.kt)("inlineCode",{parentName:"p"},"primary")," and therefore, the connection to the primary will fail. Subsequently, the ",(0,o.kt)("inlineCode",{parentName:"p"},"pg_backup")," of secondaries fail which brings these Pods into an error state."),(0,o.kt)("p",null,"As a workaround for the missing ",(0,o.kt)("inlineCode",{parentName:"p"},"role=primary")," label, the initial version of the ",(0,o.kt)("inlineCode",{parentName:"p"},"postgresql-primary")," service will look different. As the StatefulSet provides ordinality in which each Pod has a defined identity by having numbers starting from ",(0,o.kt)("inlineCode",{parentName:"p"},"0")," it is possible to ",(0,o.kt)("strong",{parentName:"p"},"define a fixed primary - let's say ",(0,o.kt)("inlineCode",{parentName:"strong"},"pod-0")," - during the bootstrapping process"),". For this purpose, we need a label to point to the first pod in a StatefulSet. Luckily, Kubernetes adds a label to each Pod automatically ","[1]",". Each Pod automatically received a label corresponding to its name in the following form:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"statefulset.kubernetes.io/pod-name\n")),(0,o.kt)("p",null,"For a StatefulSet with the name ",(0,o.kt)("inlineCode",{parentName:"p"},"postgresql-sfs")," the name of the first Pod will be ",(0,o.kt)("inlineCode",{parentName:"p"},"postgresql-sfs-0")," and its label ",(0,o.kt)("inlineCode",{parentName:"p"},"statefulset.kubernetes.io/pod-name=postgresql-sfs-0"),"."),(0,o.kt)("p",null,"So instead of selecting the ",(0,o.kt)("inlineCode",{parentName:"p"},"postgresql-primary")," Service's backend Pod by using the ",(0,o.kt)("inlineCode",{parentName:"p"},"role=primary")," label the label ",(0,o.kt)("inlineCode",{parentName:"p"},"statefulset.kubernetes.io/pod-name=postgresql-sfs-0")," is used to point to our initial primary."),(0,o.kt)("p",null,"The initial Service to point to the primary can be created with the following ",(0,o.kt)("inlineCode",{parentName:"p"},"65-service-primary-init.yaml")," file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: v1\nkind: Service\nmetadata:\n  name: postgresql-primary\n  labels:\n    app: postgresql-a\n    role: primary\nspec:\n  ports:\n  - port: 5432\n    name: postgresql-port\n  clusterIP: None\n  selector:\n      app: postgresql-a\n      # role: primary\n      statefulset.kubernetes.io/pod-name: postgresql-sfs-0\n")),(0,o.kt)("p",null,"Apply it:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"kubectl apply -f 65-service-primary-init.yaml\n")),(0,o.kt)("p",null,"There are two labels active ",(0,o.kt)("inlineCode",{parentName:"p"},"app: postgresql-a")," which selects the PostgreSQL StatefulSet from other Pods that could be residing in the same namespace as well as the ",(0,o.kt)("inlineCode",{parentName:"p"},"statefulset.kubernetes.io/pod-name: postgresql-sfs-0")," which has been discussed earlier."),(0,o.kt)("h2",{id:"subsequent-leader-elections"},"Subsequent Leader Elections"),(0,o.kt)("p",null,"There are costs for this workaround. During subsequent leader elections the logic promoting the new primary has to:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Update the label of the new primary to ",(0,o.kt)("inlineCode",{parentName:"li"},"role=primary"),"."),(0,o.kt)("li",{parentName:"ol"},"Ensure that no other Pod of the StatefulSet has this label."),(0,o.kt)("li",{parentName:"ol"},"Change the label selector of the ",(0,o.kt)("inlineCode",{parentName:"li"},"postgresql-primary")," service from ",(0,o.kt)("inlineCode",{parentName:"li"},"statefulset.kubernetes.io/pod-name=postgresql-sfs-0")," to ",(0,o.kt)("inlineCode",{parentName:"li"},"role=primary"),".")),(0,o.kt)("p",null,"Have you noticed the interesting question contained in task no. 2? How can be ensured that only a single Pod owns the ",(0,o.kt)("inlineCode",{parentName:"p"},"role=primary")," label? Can this be achieved in a single linearized, automatic operation? If not, are we creating a vulnerability here that may lead to a multi-master situation? We leave this question to a later investigation and focus on the milestone to get a first StatefulSet with streaming replication up and running."),(0,o.kt)("p",null,"Modifying the Service in a later leader election is simple:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: v1\nkind: Service\nmetadata:\n  name: postgresql-primary\n  labels:\n    app: postgresql-a\n    role: primary\nspec:\n  ports:\n  - port: 5432\n    name: postgresql-port\n  clusterIP: None\n  selector:\n      app: postgresql-a\n      role: primary\n      # statefulset.kubernetes.io/pod-name: postgresql-sfs-0\n")),(0,o.kt)("p",null,"As you can see only a single line has changed on of the selectors."),(0,o.kt)("p",null,"You can edit the existing Service:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"kubectl edit service postgresql-primary\n")),(0,o.kt)("p",null,"Or edit your local ",(0,o.kt)("inlineCode",{parentName:"p"},"65-service-primary-init.yaml")," and re-apply it. Kubernetes will notice that the Service specification has changed and apply the changed selectors."),(0,o.kt)("p",null,"This will point to the Pod with both labels ",(0,o.kt)("inlineCode",{parentName:"p"},"app: postgresql-a")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"role: primary"),". "),(0,o.kt)("p",null,"By reassigning this label to the newly elected primary, the leader promotion takes effect."),(0,o.kt)("p",null,"Later a cluster manager needs to perform failure detection and leader election. For now, it is good enough to set the label manually:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"kubectl label pod postgresql-sfs-0 role=primary\n")),(0,o.kt)("p",null,"Verify:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"kubectl get pods -l role=primary\n")),(0,o.kt)("p",null,"Output:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"NAME               READY   STATUS    RESTARTS   AGE\npostgresql-sfs-0   1/1     Running   1          7d2h\n")),(0,o.kt)("p",null,"You can also verify that the Service now has a endpoint:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Name:              postgresql-primary\nNamespace:         pg\nLabels:            app=postgresql-a\n                role=primary\nAnnotations:       Selector:  app=postgresql-a,role=primary\nType:              ClusterIP\nIP:                None\nPort:              postgresql-port  5432/TCP\nTargetPort:        5432/TCP\nEndpoints:         10.1.49.182:5432\nSession Affinity:  None\nEvents:            <none>\n")),(0,o.kt)("p",null,"The Service with a proper backend will create a DNS entry so that the following URL will resolve: ",(0,o.kt)("inlineCode",{parentName:"p"},"postgresql-primary.k8s-training.svc.cluster.local"),"."),(0,o.kt)("h2",{id:"summary"},"Summary"),(0,o.kt)("p",null,"Introducing a separate Service for resolving to the current primary will later help to perform a leader promotion. However, the behavior of Labels and Services must be closely investigated whether there are sufficient guarantees provided by Kubernetes to avoid creating downtimes or multi-master situations. This will be left for future investigations."),(0,o.kt)("h2",{id:"links"},"Links"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Kubernetes - Documentation - StatefulSets - Pod Name Label, ",(0,o.kt)("a",{parentName:"li",href:"https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#pod-name-label"},"https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#pod-name-label"))))}m.isMDXComponent=!0}}]);