"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[6718],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return m}});var i=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},o=Object.keys(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=i.createContext({}),p=function(e){var n=i.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},c=function(e){var n=p(e.components);return i.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},f=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),f=p(t),m=a,d=f["".concat(l,".").concat(m)]||f[m]||u[m]||o;return t?i.createElement(d,r(r({ref:n},c),{},{components:t})):i.createElement(d,r({ref:n},c))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,r=new Array(o);r[0]=f;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,r[1]=s;for(var p=2;p<o;p++)r[p]=t[p];return i.createElement.apply(null,r)}return i.createElement.apply(null,t)}f.displayName="MDXCreateElement"},8541:function(e,n,t){t.r(n),t.d(n,{assets:function(){return u},contentTitle:function(){return p},default:function(){return g},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return f}});var i,a=t(3117),o=t(102),r=(t(7294),t(3905)),s=["components"],l={id:"exercise-explanation",title:"Exercise Explanation"},p=void 0,c={unversionedId:"kubernetes/configmaps-and-secrets/exercise-explanation",id:"kubernetes/configmaps-and-secrets/exercise-explanation",title:"Exercise Explanation",description:"Related Videos",source:"@site/docs/kubernetes/60-configmaps-and-secrets/45-exercise-explanation.md",sourceDirName:"kubernetes/60-configmaps-and-secrets",slug:"/kubernetes/configmaps-and-secrets/exercise-explanation",permalink:"/kubernetes/configmaps-and-secrets/exercise-explanation",draft:!1,tags:[],version:"current",sidebarPosition:45,frontMatter:{id:"exercise-explanation",title:"Exercise Explanation"},sidebar:"docs",previous:{title:"ConfigMaps",permalink:"/kubernetes/configmaps-and-secrets/configmaps"},next:{title:"ConfigMap Volume Mounts",permalink:"/kubernetes/configmaps-and-secrets/configmaps-volume-mounts"}},u={},f=[{value:"Related Videos",id:"related-videos",level:2},{value:"So why Go Through This Hassle?",id:"so-why-go-through-this-hassle",level:2},{value:"Links",id:"links",level:2}],m=(i="VideoContainer",function(e){return console.warn("Component "+i+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)}),d={toc:f};function g(e){var n=e.components,t=(0,o.Z)(e,s);return(0,r.kt)("wrapper",(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"related-videos"},"Related Videos"),(0,r.kt)(m,{list:[{src:"https://www.youtube-nocookie.com/embed/7iU4uz-oaAU",title:"ConfigMaps Part 2"}],mdxType:"VideoContainer"}),(0,r.kt)("hr",null),(0,r.kt)("p",null,"The problem with the ConfigMap described in ",(0,r.kt)("inlineCode",{parentName:"p"},"40-pod-with-config-map-env.yaml")," is not obvious. In fact, it's one of the harder problems to identify as the YAML file seems semantically valid."),(0,r.kt)("p",null,"In order to understand the problem it is necessary to remember that ConfigMaps are key value pairs."),(0,r.kt)("p",null,"Look again at the ConfigMap ",(0,r.kt)("inlineCode",{parentName:"p"},"config-example-1"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"kubectl get configmaps config-example-1 -o yaml\n")),(0,r.kt)("p",null,"The output is something like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: v1\ndata:\n  20-config-file.conf: |-\n    # This is an exemplary config file\n\n    number-of-requests = 20\n    very-import-switch = true\nkind: ConfigMap\nmetadata:\n  creationTimestamp: '2020-03-04T17:54:19Z'\n  name: config-example-1\n  namespace: k8s-training\n  resourceVersion: '6128955'\n  selfLink: /api/v1/namespaces/k8s-training/configmaps/config-example-1\n  uid: 2ef0fc0d-e128-47d7-be57-766d2b023612\n")),(0,r.kt)("p",null,"Now compare it to the output of ",(0,r.kt)("inlineCode",{parentName:"p"},"config-example-2"),". Can you see the subtle difference?"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"kubectl get configmaps config-example-2 -o yaml\n")),(0,r.kt)("p",null,"The output looks like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: v1\ndata:\n  number-of-requests: '20'\n  very-import-switch: 'true'\nkind: ConfigMap\nmetadata:\n  creationTimestamp: '2020-03-04T17:40:48Z'\n  name: config-example-2\n  namespace: k8s-training\n  resourceVersion: '6126817'\n  selfLink: /api/v1/namespaces/k8s-training/configmaps/config-example-2\n  uid: 3366244e-da8e-4ac8-8cf4-dc21fca7ff56\n")),(0,r.kt)("p",null,"If you compare the indentation you may recognize that in ",(0,r.kt)("inlineCode",{parentName:"p"},"config-example-1")," the section ",(0,r.kt)("inlineCode",{parentName:"p"},"data")," contains only one key: ",(0,r.kt)("inlineCode",{parentName:"p"},"20-config-file.conf"),". This implies that for Kubernetes this ConfigMap has one key and its value is a string:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"# This is an exemplary config file\n\nnumber-of-requests = 20\nvery-import-switch = true\n")),(0,r.kt)("p",null,"This string is put into the ConfigMap value literally corresponding to the key ",(0,r.kt)("inlineCode",{parentName:"p"},"20-config-file.conf"),". A sign for this is the ",(0,r.kt)("inlineCode",{parentName:"p"},"|-")," token indicating that a multi-line string follows and that newlines at the end of the string are to be stripped ","[1]",". Consequently, Kubernetes does not parse the value associated with the key ",(0,r.kt)("inlineCode",{parentName:"p"},"20-config-file.conf"),". It doesn't know about its structure, although it is obvious to the human mind. Exactly that's the gotcha."),(0,r.kt)("p",null,"In contrast to this, in ",(0,r.kt)("inlineCode",{parentName:"p"},"config-example-2")," the structure is different. There is no top-level key named ",(0,r.kt)("inlineCode",{parentName:"p"},"20-config-file.conf"),". Instead, there are two keys ",(0,r.kt)("inlineCode",{parentName:"p"},"number-of-requests")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"very-import-switch"),". As Kubernetes understands ConfigMap keys and values they can be used as expected in the Pod definition to define environment variables."),(0,r.kt)("p",null,"Here is how the fixed ConfigMap should look like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: v1\nkind: Pod\nmetadata:\n  name: busybox-config\nspec:\n  containers:\n    - image: busybox\n      name: busybox-config-container\n      command:\n        - 'env'\n      env:\n        - name: NUMBER_OF_REQUESTS\n          valueFrom:\n            configMapKeyRef:\n              name: config-example-2\n              key: number-of-requests\n        - name: VERY_IMPORTANT_SWITCH\n          valueFrom:\n            configMapKeyRef:\n              name: config-example-2\n              key: very-important-switch\n  restartPolicy: Never\n")),(0,r.kt)("h2",{id:"so-why-go-through-this-hassle"},"So why Go Through This Hassle?"),(0,r.kt)("p",null,"Sometimes you want to access several parameters individually. In this case the definition of distinct key-value pairs is necessary. However, if you want to store an entire config file as a value, reading the config file into a ConfigMap associated with a filename-like key such as ",(0,r.kt)("inlineCode",{parentName:"p"},"config-file.conf")," is helpful."),(0,r.kt)("h2",{id:"links"},"Links"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"YAML Multiline, ",(0,r.kt)("a",{parentName:"li",href:"https://yaml-multiline.info/"},"https://yaml-multiline.info/"))))}g.isMDXComponent=!0}}]);